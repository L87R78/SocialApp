{"version":3,"sources":["config/config.js","components/loginAndRegister.jsx","Note/note.jsx","NoteForm/noteForm.jsx","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoginAndRegister","props","handleChange","e","setState","target","name","value","login","preventDefault","auth","signInWithEmailAndPassword","state","email","password","catch","err","fireErrors","message","register","createUserWithEmailAndPassword","getAction","formTitle","loginBtn","errorNotifications","this","className","submitBtn","type","onClick","login_register","classes","id","TextField","input","onChange","label","Component","withStyles","margin","Note","handleRemoveNote","removeNote","userEmail","noteContent","noteId","handleUserInput","noteNewContent","writeNote","length","addNote","placeholder","App","logOut","signOut","note","database","push","set","currUserEmail","child","remove","ref","notes","previousNotes","on","snap","key","val","i","splice","user","currentUser","map","authListener","onAuthStateChanged","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e22aa0b2.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n const DB_CONFIG = {\r\n    apiKey: \"AIzaSyDFtFSywiZ3BJ9KSxLEfOgRjmnmqsRfxCg\",\r\n    authDomain: \"react-notes-61e38.firebaseapp.com\",\r\n    databaseURL: \"https://react-notes-61e38.firebaseio.com\",\r\n    projectId: \"react-notes-61e38\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"72182355328\",\r\n    appId: \"1:72182355328:web:35ff3ba8f20ca05c4fdd65\"\r\n};\r\n\r\nconst fire = firebase.initializeApp(DB_CONFIG);\r\nexport default fire;\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport firebase from '../config/config';\r\nimport PropTypes from 'prop-types';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst styles = {\r\n    input: {\r\n        margin: '0.5rem',\r\n    }\r\n};\r\n\r\nclass LoginAndRegister extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            fireErrors: '',\r\n            formTitle: 'Login',\r\n            loginBtn: true\r\n\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    login = (e) => {\r\n        e.preventDefault();\r\n\r\n        firebase\r\n            .auth()\r\n            .signInWithEmailAndPassword(this.state.email, this.state.password)\r\n            .catch((err) => {\r\n                this.setState({\r\n                    fireErrors: err.message\r\n                })\r\n            })\r\n    }\r\n    register = (e) => {\r\n        e.preventDefault();\r\n        firebase\r\n            .auth()\r\n            .createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n            .catch((err) => {\r\n                this.setState({\r\n                    fireErrors: err.message\r\n                })\r\n            })\r\n    }\r\n    getAction = (e) => {\r\n        if (e === 'reg') {\r\n            this.setState({\r\n                formTitle: \"Register New User\",\r\n                loginBtn: false,\r\n                fireErrors: ''\r\n            })\r\n        } else {\r\n            this.setState({\r\n                formTitle: \"Login\",\r\n                loginBtn: true,\r\n                fireErrors: ''\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let errorNotifications = this.state.fireErrors\r\n            ? (<div className=\"error\">{this.state.fireErrors}</div>)\r\n            : null\r\n\r\n        let submitBtn = this.state.loginBtn\r\n            ? (<button type=\"submit\" className=\"loginRegisterBtn\" onClick={this.login} >Login</button>)\r\n            : (<button type=\"submit\" className=\"loginRegisterBtn\" onClick={this.register} >Register</button>)\r\n\r\n        let login_register = this.state.loginBtn\r\n            ? (<button className=\"loginRegisterBtn\" onClick={() => this.getAction('reg')}>Register</button>)\r\n            : (<button className=\"loginRegisterBtn\" onClick={() => this.getAction('login')}>Login</button>)\r\n\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className=\"form_block\">\r\n                <div id=\"title\">\r\n                    {this.state.formTitle}\r\n                </div>\r\n                <div className=\"body\">\r\n                    {errorNotifications}\r\n\r\n                    <form >\r\n                        <TextField\r\n                            className={classes.input}\r\n                            type=\"text\"\r\n                            value={this.state.email}\r\n                            onChange={this.handleChange}\r\n                            name=\"email\"\r\n                            label=\"Email\"\r\n                        />\r\n                        <TextField type=\"password\"\r\n                            className={classes.input}\r\n                            value={this.state.password}\r\n                            onChange={this.handleChange}\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                        />\r\n                    </form>\r\n                    <div className=\"buttons\">\r\n                        {submitBtn}\r\n                        {login_register}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nLoginAndRegister.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n}\r\nexport default withStyles(styles)(LoginAndRegister);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Note extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n    }\r\n    handleRemoveNote = (id) => {\r\n        this.props.removeNote(id)\r\n    }\r\n    render() {\r\n        let { userEmail, noteContent, noteId } = this.props;\r\n\r\n        return (\r\n            <div className=\"note fade_in\">\r\n               \r\n                    <i className=\"far fa-smile-wink\"></i>\r\n                \r\n                <div className=\"email_and_text\">\r\n                    <span>{userEmail}</span>\r\n                    {/* <div className=\"btn_remove\">\r\n                    <button onClick={() => this.handleRemoveNote(noteId)}>X</button>\r\n                </div> */}\r\n                    <p>{noteContent}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nNote.propTypes = {\r\n    noteContent: PropTypes.string\r\n};\r\nexport default Note;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Note extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            noteNewContent: ''\r\n        }\r\n    }\r\n    handleUserInput = (e) => {\r\n        this.setState({\r\n            noteNewContent: e.target.value\r\n        })\r\n    }\r\n    writeNote = (e) => {\r\n        if (this.state.noteNewContent.length > 0) {\r\n            this.props.addNote(this.state.noteNewContent);\r\n            this.setState({\r\n                noteNewContent: ''\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"noteForm\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Please write text here...\"\r\n                    value={this.state.noteNewContent}\r\n                    onChange={this.handleUserInput}\r\n                />\r\n                <button className=\"btnAdd\" onClick={this.writeNote}>Add Note</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Note;\r\n","import React, { Component } from 'react';\r\nimport firebase from '../config/config';\r\nimport Note from '../Note/note';\r\nimport NoteForm from '../NoteForm/noteForm';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.database = firebase.database().ref().child('notes');\r\n        this.state = {\r\n            notes: [],\r\n            currUserEmail: ''\r\n        }\r\n    }\r\n    logOut = () => {\r\n        firebase.auth().signOut();\r\n    }\r\n    addNote = (note) => {\r\n        this.database.push().set({\r\n            noteContent: note,\r\n            userEmail: this.state.currUserEmail\r\n        });\r\n    }\r\n    removeNote = (noteId) => {\r\n        this.database.child(noteId).remove();\r\n    }\r\n\r\n    componentWillMount() {\r\n        const previousNotes = this.state.notes;\r\n        this.database.on('child_added', snap => {\r\n            previousNotes.push({\r\n                id: snap.key,\r\n                noteContent: snap.val().noteContent,\r\n                userEmail: snap.val().userEmail\r\n            })\r\n            this.setState({\r\n                notes: previousNotes\r\n            })\r\n        })\r\n        this.database.on('child_removed', snap => {\r\n            for (let i = 0; i < previousNotes.length; i++) {\r\n                if (previousNotes[i].id === snap.key) {\r\n                    previousNotes.splice(i, 1)\r\n                }\r\n            }\r\n            this.setState({\r\n                notes: previousNotes\r\n            })\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        let user = firebase.auth().currentUser;\r\n        if (user) {\r\n            this.setState({\r\n                currUserEmail: user.email\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"notes_and_form\">\r\n                <div className=\"current_user\">\r\n                    <span>{this.state.currUserEmail}</span>\r\n                    <button onClick={this.logOut}>LogOut</button>\r\n                </div>\r\n\r\n                <div className=\"notes_box\">\r\n                    {\r\n                        this.state.notes.map((note, key) => {\r\n                            return (\r\n                                < Note\r\n                                    noteContent={note.noteContent}\r\n                                    noteId={note.id}\r\n                                    key={note.id}\r\n                                    userEmail={note.userEmail}\r\n                                    removeNote={this.removeNote}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className=\"noteForm\">\r\n                    < NoteForm addNote={this.addNote} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport firebase from './config/config';\r\nimport LoginRegister from './components/loginAndRegister';\r\nimport Home from './components/home.jsx';\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      user: null\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.authListener();\r\n  }\r\n  authListener = () => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n        if(user){\r\n          this.setState({\r\n            user\r\n          })\r\n        }else {\r\n          this.setState({\r\n            user: null \r\n          })\r\n        }\r\n    })\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {\r\n          this.state.user\r\n          ? < Home />\r\n          : < LoginRegister />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}