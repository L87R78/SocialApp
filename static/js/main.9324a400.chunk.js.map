{"version":3,"sources":["config/config.js","components/loginAndRegister.jsx","Note/note.jsx","NoteForm/noteForm.jsx","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoginAndRegister","props","handleChange","e","setState","target","name","value","login","preventDefault","auth","signInWithEmailAndPassword","state","email","password","catch","err","fireErrors","message","register","createUserWithEmailAndPassword","formTitle","loginBtn","errorNotifications","this","className","console","log","id","type","onChange","onClick","Component","Note","handleRemoveNote","removeNote","noteContent","noteId","handleUserInput","noteNewContent","writeNote","addNote","placeholder","App","logOut","signOut","note","database","push","set","child","remove","ref","notes","previousNotes","on","snap","key","val","i","length","splice","map","authListener","onAuthStateChanged","user","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9324a400.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n const DB_CONFIG = {\r\n    apiKey: \"AIzaSyDFtFSywiZ3BJ9KSxLEfOgRjmnmqsRfxCg\",\r\n    authDomain: \"react-notes-61e38.firebaseapp.com\",\r\n    databaseURL: \"https://react-notes-61e38.firebaseio.com\",\r\n    projectId: \"react-notes-61e38\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"72182355328\",\r\n    appId: \"1:72182355328:web:35ff3ba8f20ca05c4fdd65\"\r\n};\r\n\r\nconst fire = firebase.initializeApp(DB_CONFIG);\r\nexport default fire;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport fire from '../config/config';\r\n\r\nclass LoginAndRegister extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            fireErrors: '',\r\n            formTitle: 'Login',\r\n            loginBtn: true\r\n\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    login = (e) => {\r\n        e.preventDefault();\r\n        fire\r\n            .auth()\r\n            .signInWithEmailAndPassword(this.state.email, this.state.password)\r\n            .catch((err) => {\r\n                this.setState({\r\n                    fireErrors: err.message\r\n                })\r\n            })\r\n\r\n    }\r\n    register = (e) => {\r\n        e.preventDefault();\r\n        fire\r\n            .auth()\r\n            .createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n            .catch((err) => {\r\n                this.setState({\r\n                    fireErrors: err.message\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        let errorNotifications = this.state.fireErrors\r\n            ? (<div className=\"error\">{this.state.fireErrors}</div>)\r\n            : null\r\n        console.log(errorNotifications)\r\n        return (\r\n            <div className=\"form_block\">\r\n                <div id=\"title\">\r\n                    {this.state.formTitle}\r\n                </div>\r\n                <div className=\"body\">\r\n                    {errorNotifications}\r\n                    <form>\r\n                        <input type=\"text\"\r\n                            value={this.state.email}\r\n                            onChange={this.handleChange}\r\n                            name=\"email\"\r\n                        />\r\n                        <input type=\"password\"\r\n                            value={this.state.password}\r\n                            onChange={this.handleChange}\r\n                            name=\"password\"\r\n                        />\r\n                        <button type=\"submit\" className=\"loginBtn\" onClick={this.login} >Enter</button>\r\n\r\n                    </form>\r\n                    <button type=\"submit\" className=\"registerBtn\" onClick={this.register} >Register</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default LoginAndRegister;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Note extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.noteContent = props.noteContent;\r\n        this.noteId = props.noteId;\r\n    }\r\n    handleRemoveNote = (id) => {\r\n        this.props.removeNote(id)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"note fade_in\">\r\n                <div className=\"btn_remove\">\r\n                    <button onClick={() => this.handleRemoveNote(this.noteId)}>X</button>\r\n                </div>\r\n\r\n                <div>\r\n                    <p className=\"noteContent\">{this.noteContent}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nNote.propTypes = {\r\n    noteContent: PropTypes.string\r\n};\r\nexport default Note;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Note extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            noteNewContent: ''\r\n        }\r\n    }\r\n    handleUserInput = (e) => {\r\n        this.setState({\r\n            noteNewContent: e.target.value\r\n        })\r\n    }\r\n    writeNote = (e) => {\r\n        this.props.addNote(this.state.noteNewContent);\r\n        this.setState({\r\n            noteNewContent: ''\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"noteForm\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Please write text here...\"\r\n                    value={this.state.noteNewContent}\r\n                    onChange={this.handleUserInput}\r\n                />\r\n                <button className=\"btnAdd\" onClick={this.writeNote}>Add</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Note;\r\n","import React, { Component } from 'react';\r\nimport fire from '../config/config';\r\nimport Note from '../Note/note';\r\nimport NoteForm from '../NoteForm/noteForm';\r\n//import firebase from 'firebase/app';\r\n//import 'firebase/database';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        //this.app = firebase.initializeApp(DB_CONFIG);\r\n        this.database = fire.database().ref().child('notes');\r\n        this.state = {\r\n            notes: [],\r\n        }\r\n    }\r\n    logOut = () => {\r\n        fire.auth().signOut();\r\n    }\r\n    addNote = (note) => {\r\n        this.database.push().set({ noteContent: note });\r\n    }\r\n    removeNote = (noteId) => {\r\n        this.database.child(noteId).remove();\r\n    }\r\n\r\n    componentWillMount() {\r\n        const previousNotes = this.state.notes;\r\n        this.database.on('child_added', snap => {\r\n            previousNotes.push({\r\n                id: snap.key,\r\n                noteContent: snap.val().noteContent\r\n            })\r\n            this.setState({\r\n                notes: previousNotes\r\n            })\r\n        })\r\n        this.database.on('child_removed', snap => {\r\n            for (let i = 0; i < previousNotes.length; i++) {\r\n                if (previousNotes[i].id === snap.key) {\r\n                    previousNotes.splice(i, 1)\r\n                }\r\n            }\r\n            this.setState({\r\n                notes: previousNotes\r\n            })\r\n        })\r\n    }\r\n    render() {\r\n        // let errorNotifications = this.state.fireErrors\r\n        //     ? (<div className=\"error\">{this.state.fireErrors}</div>)\r\n        //     : null\r\n\r\n        //console.log(this.state.notes)\r\n        return (\r\n            <div className=\"App\">\r\n                <h2>Home page</h2>\r\n                <button onClick={this.logOut}>logOut</button>\r\n                <h2>react and firebase</h2>\r\n                <div className=\"notesBody\">\r\n                    {\r\n                        this.state.notes.map((note, key) => {\r\n                            return (\r\n                                < Note\r\n                                    noteContent={note.noteContent}\r\n                                    noteId={note.id}\r\n                                    key={note.id}\r\n                                    removeNote={this.removeNote}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className=\"noteForm\">\r\n                    < NoteForm addNote={this.addNote} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\nimport fire from './config/config';\nimport LoginRegister from './components/loginAndRegister';\nimport Home from './components/home.jsx';\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      user: null\n    }\n  }\n  componentDidMount() {\n    this.authListener();\n  }\n  authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n        if(user){\n          this.setState({\n            user\n          })\n        }else {\n          this.setState({\n            user: null \n          })\n        }\n    })\n  }\n \n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.user\n          ? < Home />\n          : < LoginRegister />\n        }\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}