{"version":3,"sources":["config/file.js","components/loginRegister.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoginRegister","props","handleChange","e","setState","target","name","value","login","console","log","preventDefault","auth","signInWithEmailAndPassword","state","email","password","catch","err","fireErrors","message","register","createUserWithEmailAndPassword","formTitle","loginBtn","errorNotifications","this","className","id","type","onChange","onClick","Component","Home","logOut","signOut","App","authListener","onAuthStateChanged","user","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAaiBA,E,OADFC,EAASC,cAVX,CACTC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,8C,QCyEIC,E,YA7EX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAWVC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAdf,EAiBnBC,MAAQ,SAACL,GACLM,QAAQC,IAAI,MACZP,EAAEQ,iBACFrB,EACKsB,OACAC,2BAA2B,EAAKC,MAAMC,MAAO,EAAKD,MAAME,UACxDC,OAAM,SAACC,GACJT,QAAQC,IAAI,QACZ,EAAKN,SAAS,CACVe,WAAYD,EAAIE,cA1Bb,EA+BnBC,SAAW,SAAClB,GACRA,EAAEQ,iBACFrB,EACKsB,OACAU,+BAA+B,EAAKR,MAAMC,MAAO,EAAKD,MAAME,UAC5DC,OAAM,SAACC,GACJ,EAAKd,SAAS,CACVe,WAAYD,EAAIE,cAnC5B,EAAKN,MAAQ,CACTC,MAAO,GACPC,SAAU,GACVG,WAAY,GACZI,UAAW,QACXC,UAAU,GARC,E,sEA6Cf,IAAIC,EAAqBC,KAAKZ,MAAMK,WACjC,yBAAKQ,UAAU,SAASD,KAAKZ,MAAMK,YACpC,KAEF,OADAV,QAAQC,IAAIe,GAER,yBAAKE,UAAU,cACX,yBAAKC,GAAG,SACHF,KAAKZ,MAAMS,WAEhB,yBAAKI,UAAU,QACVF,EACD,8BACI,2BAAOI,KAAK,OACRtB,MAAOmB,KAAKZ,MAAMC,MAClBe,SAAUJ,KAAKxB,aACfI,KAAK,UAET,2BAAOuB,KAAK,WACRtB,MAAOmB,KAAKZ,MAAME,SAClBc,SAAUJ,KAAKxB,aACfI,KAAK,aAET,4BAAQuB,KAAK,SAASF,UAAU,WAAWI,QAASL,KAAKlB,OAAzD,UAGJ,4BAAQqB,KAAK,SAASF,UAAU,cAAcI,QAASL,KAAKL,UAA5D,kB,GAvEQW,aCcbC,E,2MAbXC,OAAS,WACL5C,EAAKsB,OAAOuB,W,wEAGZ,OACI,6BACI,yCACA,4BAAQJ,QAASL,KAAKQ,QAAtB,e,GATGF,aC2CJI,G,kBAvCb,WAAYnC,GAAQ,IAAD,8BACjB,4CAAMA,KASRoC,aAAe,WACb/C,EAAKsB,OAAO0B,oBAAmB,SAACC,GACzBA,EACD,EAAKnC,SAAS,CACZmC,SAGF,EAAKnC,SAAS,CACZmC,KAAM,WAfd,EAAKzB,MAAQ,CACXyB,KAAM,MAJS,E,iFAQjBb,KAAKW,iB,+BAmBL,OACE,yBAAKV,UAAU,OAEXD,KAAKZ,MAAMyB,KACT,kBAAE,EAAF,MACA,kBAAE,EAAF,W,GAjCMP,cCMEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2cd13ded.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyB46gMT_IVAM33tk5W_tpd3sHgRT7t0c4c\",\r\n    authDomain: \"react-loginbox.firebaseapp.com\",\r\n    databaseURL: \"https://react-loginbox.firebaseio.com\",\r\n    projectId: \"react-loginbox\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"829660141332\",\r\n    appId: \"1:829660141332:web:ccb1b5048ac2d21c86d401\"\r\n  };\r\n\r\n  const fire = firebase.initializeApp(config);\r\n  export default fire;","import React, { Component } from 'react';\r\nimport fire from '../config/file';\r\n\r\n\r\nclass LoginRegister extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            fireErrors: '',\r\n            formTitle: 'Login',\r\n            loginBtn: true\r\n\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    login = (e) => {\r\n        console.log('hm')\r\n        e.preventDefault();\r\n        fire\r\n            .auth()\r\n            .signInWithEmailAndPassword(this.state.email, this.state.password)\r\n            .catch((err) => {\r\n                console.log('here')\r\n                this.setState({\r\n                    fireErrors: err.message\r\n                })\r\n            })\r\n\r\n    }\r\n    register = (e) => {\r\n        e.preventDefault();\r\n        fire\r\n            .auth()\r\n            .createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n            .catch((err) => {\r\n                this.setState({\r\n                    fireErrors: err.message\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        let errorNotifications = this.state.fireErrors \r\n        ? (<div className=\"error\">{this.state.fireErrors}</div>)\r\n        : null\r\n        console.log(errorNotifications)\r\n        return (\r\n            <div className=\"form_block\">\r\n                <div id=\"title\">\r\n                    {this.state.formTitle}\r\n                </div>\r\n                <div className=\"body\">\r\n                    {errorNotifications}\r\n                    <form>\r\n                        <input type=\"text\"\r\n                            value={this.state.email}\r\n                            onChange={this.handleChange}\r\n                            name=\"email\"\r\n                        />\r\n                        <input type=\"password\"\r\n                            value={this.state.password}\r\n                            onChange={this.handleChange}\r\n                            name=\"password\"\r\n                        />\r\n                        <button type=\"submit\" className=\"loginBtn\" onClick={this.login} >Enter</button>\r\n\r\n                    </form>\r\n                    <button type=\"submit\" className=\"registerBtn\" onClick={this.register} >Register</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginRegister;\r\n","import React, { Component } from 'react';\r\nimport fire from '../config/file';\r\n\r\nclass Home extends Component {\r\n\r\n    logOut = () => {\r\n        fire.auth().signOut();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Home page</h2>\r\n                <button onClick={this.logOut}>logOut</button>\r\n            </div >\r\n        )\r\n    }\r\n\r\n}\r\nexport default Home;\r\n","import React, { Component } from 'react';\nimport fire from './config/file';\nimport LoginRegister from './components/loginRegister';\nimport Home from './components/home';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      user: null\n    }\n  }\n  componentDidMount() {\n    this.authListener();\n  }\n  authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n        if(user){\n          this.setState({\n            user\n          })\n        }else {\n          this.setState({\n            user: null \n          })\n        }\n    })\n\n  }\n \n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.user\n          ? < Home />\n          : < LoginRegister />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}